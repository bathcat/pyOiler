from ..shared.solver import Solver
from functools import lru_cache
import sympy 




get_divisors=sympy.divisors



@lru_cache
def get_triangle_number(index:int):
    if index<0:
        raise ValueError("Only >= 0")
    if index == 0:
        return 1
    return index + 1 + get_triangle_number(index-1)



def _solve(print=print):

    for i in range(100_000):
        t = get_triangle_number(i)
        ds = get_divisors(t)
        d_count= len(ds)
        if d_count > 500:
            print(f't:{t}: {d_count}')
            return True
    print('Not done')
    return False

description = '''
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

     1: 1
     3: 1,3
     6: 1,2,3,6
    10: 1,2,5,10
    15: 1,3,5,15
    21: 1,3,7,21
    28: 1,2,4,7,14,28

We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred divisors?

'''

solver = Solver(12,
                'Highly divisible triangular number',
                description,
                _solve
                )